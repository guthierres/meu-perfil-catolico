const CACHE_NAME = 'catolid-v2';
const RUNTIME_CACHE = 'catolid-runtime-v2';

// ðŸ›‘ CORREÃ‡ÃƒO 1: Removido '/' e '/index.html' para aplicar estratÃ©gia Network-First no fetch.
const STATIC_ASSETS = [
Â  '/manifest.json',
Â  '/icon.svg',
Â  '/icon-192.png',
Â  '/icon-512.png'
];

const API_CACHE_DURATION = 5 * 60 * 1000;

// --- Evento 'install' ---
self.addEventListener('install', (event) => {
Â  event.waitUntil(
Â  Â  caches.open(CACHE_NAME)
Â  Â  Â  .then((cache) => {
          // O 'install' agora sÃ³ armazena os ativos estÃ¡ticos remanescentes.
Â  Â  Â  Â  return cache.addAll(STATIC_ASSETS.map(url => new Request(url, { cache: 'reload' })));
Â  Â  Â  })
Â  Â  Â  .then(() => self.skipWaiting())
Â  );
});

// --- Evento 'activate' ---
self.addEventListener('activate', (event) => {
Â  const cacheWhitelist = [CACHE_NAME, RUNTIME_CACHE];
Â  event.waitUntil(
Â  Â  caches.keys()
Â  Â  Â  .then((cacheNames) => {
Â  Â  Â  Â  return Promise.all(
Â  Â  Â  Â  Â  cacheNames.map((cacheName) => {
Â  Â  Â  Â  Â  Â  if (!cacheWhitelist.includes(cacheName)) {
Â  Â  Â  Â  Â  Â  Â  return caches.delete(cacheName);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  })
Â  Â  Â  Â  );
Â  Â  Â  })
Â  Â  Â  .then(() => self.clients.claim())
Â  );
});

// --- Evento 'fetch' com a CorreÃ§Ã£o de Protocolo ---
self.addEventListener('fetch', (event) => {
Â  const { request } = event;
Â  const url = new URL(request.url);

Â  // Ignora requisiÃ§Ãµes que nÃ£o sÃ£o http/https (como 'chrome-extension:')
Â  if (!url.protocol.startsWith('http')) {
Â  Â  Â  return;
Â  }

Â  if (request.method !== 'GET') {
Â  Â  return;
Â  }

  // 1. ðŸ¥‡ NOVA ESTRATÃ‰GIA: Network-First com Fallback para o INDEX.HTML e a raiz ('/')
  // Isso forÃ§a o SW a buscar a versÃ£o mais recente na rede e sÃ³ usa o cache como fallback OFFLINE.
  // Isso resolve a "pÃ¡gina em branco" na atualizaÃ§Ã£o.
  if (url.origin === location.origin && (url.pathname === '/' || url.pathname === '/index.html')) {
      event.respondWith(
          // Tenta a rede, se falhar, retorna o index.html do cache (o que foi instalado inicialmente)
          fetch(request).catch(() => caches.match('/index.html'))
      );
      return;
  }
    
Â  // 2. EstratÃ©gia: Cache-First para Assets EstÃ¡ticos (Same Origin)
  // Agora sÃ³ inclui os manifestos e Ã­cones.
Â  if (url.origin === location.origin && STATIC_ASSETS.includes(url.pathname)) {
Â  Â  event.respondWith(
Â  Â  Â  caches.match(request).then((cachedResponse) => {
Â  Â  Â  Â  if (cachedResponse) {
Â  Â  Â  Â  Â  return cachedResponse;
Â  Â  Â  Â  }
Â  Â  Â  Â  return fetch(request).then((networkResponse) => {
Â  Â  Â  Â  Â  return caches.open(CACHE_NAME).then((cache) => {
                // CORREÃ‡ÃƒO: Verifica se a resposta Ã© vÃ¡lida (nÃ£o 404/500) antes de armazenar
                if (networkResponse.ok) {
                    cache.put(request, networkResponse.clone());
                }
Â  Â  Â  Â  Â  Â  Â  Â  return networkResponse;
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  });
Â  Â  Â  })
Â  Â  );
Â  Â  return;
Â  }

Â  // 3. EstratÃ©gia: Network-First para Outras RequisiÃ§Ãµes Same-Origin (Scripts, Styles, etc.)
Â  if (url.origin === location.origin) {
Â  Â  event.respondWith(
Â  Â  Â  fetch(request)
Â  Â  Â  Â  .then((networkResponse) => {
Â  Â  Â  Â  Â  if (networkResponse.ok) {
Â  Â  Â  Â  Â  Â  return caches.open(RUNTIME_CACHE).then((cache) => {
Â  Â  Â  Â  Â  Â  Â  cache.put(request, networkResponse.clone());
Â  Â  Â  Â  Â  Â  Â  return networkResponse;
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  return networkResponse;
Â  Â  Â  Â  })
Â  Â  Â  Â  .catch(() => {
          // Fallback para o cache em caso de falha de rede
Â  Â  Â  Â  Â  return caches.match(request);
Â  Â  Â  Â  })
Â  Â  );
Â  Â  return;
Â  }

Â  // 4. EstratÃ©gia: Network-Only com Fallback (sem cache inicial, para Supabase)
Â  if (url.hostname.includes('supabase.co')) {
Â  Â  event.respondWith(
Â  Â  Â  fetch(request).catch(() => caches.match(request))
Â  Â  );
Â  Â  return;
Â  }

Â  // 5. EstratÃ©gia: Stale-While-Revalidate (com Timeout) para Outras APIs Cross-Origin
Â  event.respondWith(
Â  Â  caches.match(request)
Â  Â  Â  .then((cachedResponse) => {
Â  Â  Â  Â  if (cachedResponse) {
Â  Â  Â  Â  Â  const cachedDate = new Date(cachedResponse.headers.get('date'));
Â  Â  Â  Â  Â  const now = Date.now();
          // Verifica se o cache expirou
Â  Â  Â  Â  Â  if (now - cachedDate.getTime() < API_CACHE_DURATION) {
Â  Â  Â  Â  Â  Â  return cachedResponse;
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  Â  return fetch(request)
Â  Â  Â  Â  Â  .then((networkResponse) => {
Â  Â  Â  Â  Â  Â  if (networkResponse.ok) {
Â  Â  Â  Â  Â  Â  Â  return caches.open(RUNTIME_CACHE).then((cache) => {
Â  Â  Â  Â  Â  Â  Â  Â  cache.put(request, networkResponse.clone());
Â  Â  Â  Â  Â  Â  Â  Â  return networkResponse;
Â  Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  return networkResponse;
Â  Â  Â  Â  Â  })
Â  Â  Â  Â  Â  .catch(() => {
          // Se a rede falhar, retorna o cache antigo
Â  Â  Â  Â  Â  Â  if (cachedResponse) {
Â  Â  Â  Â  Â  Â  Â  return cachedResponse;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  throw new Error('Network unavailable');
Â  Â  Â  Â  Â  });
Â  Â  Â  })
Â  );
});

// --- Evento 'message' (Permanece inalterado) ---
self.addEventListener('message', (event) => {
Â  if (event.data && event.data.type === 'SKIP_WAITING') {
Â  Â  self.skipWaiting();
Â  }
Â  if (event.data && event.data.type === 'CLEAR_CACHE') {
Â  Â  event.waitUntil(
Â  Â  Â  caches.keys().then((cacheNames) => {
Â  Â  Â  Â  return Promise.all(
Â  Â  Â  Â  Â  cacheNames.map((cacheName) => caches.delete(cacheName))
Â  Â  Â  Â  );
Â  Â  Â  })
Â  Â  );
Â  }
});
